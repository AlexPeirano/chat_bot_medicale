#!/usr/bin/env python3
"""
Analyse d√©taill√©e des cas en √©chec
"""

import sys
sys.path.append('/Users/alexpeirano/Desktop/commande_entreprise')

from ollama import get_collection, smart_guideline_selection
from colorama import Fore, Style, init
init(autoreset=True)

def analyser_echecs():
    """Analyse d√©taill√©e des cas 1 et 10 qui ont √©chou√©"""
    
    echecs = [
        {
            "id": 1,
            "description": "Homme 22 ans, c√©phal√©e brutale en coup de tonnerre, vomissements",
            "expected": "Scanner c√©r√©bral urgent",
            "probleme": "Syst√®me a recommand√© IRM au lieu de scanner"
        },
        {
            "id": 10, 
            "description": "Homme 28 ans, colique lombaire typique sans fi√®vre",
            "expected": "Scanner abdomino-pelvien sans injection",
            "probleme": "Syst√®me a recommand√© IRM c√©r√©brale (SEP) au lieu de scanner abdominal"
        }
    ]
    
    print(f"{Fore.RED}{'='*80}")
    print(f"üîç ANALYSE DES √âCHECS")
    print(f"{'='*80}{Style.RESET_ALL}")
    
    collection = get_collection()
    
    for echec in echecs:
        print(f"\n{Fore.YELLOW}=== CAS {echec['id']} - √âCHEC ==={Style.RESET_ALL}")
        print(f"üìù Patient: {echec['description']}")
        print(f"üéØ Attendu: {echec['expected']}")
        print(f"‚ö†Ô∏è  Probl√®me: {echec['probleme']}")
        
        # Test avec le syst√®me actuel
        result = smart_guideline_selection(echec['description'], collection)
        print(f"ü§ñ Syst√®me actuel: {result[:120]}...")
        
        # Analyse des mots-cl√©s manquants
        print(f"\nüîç ANALYSE:")
        
        if echec['id'] == 1:
            print(f"   ‚Ä¢ 'Coup de tonnerre' devrait d√©clencher 'scanner c√©r√©bral urgent'")
            print(f"   ‚Ä¢ Syst√®me n'a pas reconnu l'urgence h√©morragique")
            print(f"   ‚Ä¢ Am√©lioration: Renforcer d√©tection 'coup de tonnerre' ‚Üí scanner")
            
        elif echec['id'] == 10:
            print(f"   ‚Ä¢ 'Colique lombaire' devrait d√©clencher 'colique n√©phr√©tique'")  
            print(f"   ‚Ä¢ Syst√®me confond avec troubles neurologiques")
            print(f"   ‚Ä¢ Am√©lioration: Renforcer d√©tection 'colique lombaire' ‚Üí n√©phr√©tique")

def recommandations():
    """Recommandations d'am√©lioration"""
    
    print(f"\n{Fore.GREEN}{'='*80}")
    print(f"üí° RECOMMANDATIONS D'AM√âLIORATION")
    print(f"{'='*80}{Style.RESET_ALL}")
    
    print(f"\nüéØ ACTIONS PRIORITAIRES:")
    print(f"1. Renforcer d√©tection 'coup de tonnerre' ‚Üí scanner c√©r√©bral urgent")
    print(f"2. Am√©liorer reconnaissance 'colique lombaire' ‚Üí n√©phr√©tique")
    
    print(f"\nüìà IMPACT ESTIM√â:")
    print(f"   Pr√©cision actuelle: 86.7%")
    print(f"   Pr√©cision cible: 93.3% (+2 cas)")
    
    print(f"\n‚úÖ POINTS FORTS IDENTIFI√âS:")
    print(f"   ‚Ä¢ Excellent sur cas p√©diatriques (100%)")
    print(f"   ‚Ä¢ Parfait sur cas de grossesse")
    print(f"   ‚Ä¢ Tr√®s bon sur lombalgies communes")
    print(f"   ‚Ä¢ Excellent sur urgences neurologiques (d√©ficits)")

if __name__ == "__main__":
    analyser_echecs()
    recommandations()
