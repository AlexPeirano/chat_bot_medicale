#!/usr/bin/env python3
"""
Test final apr√®s correction du probl√®me lombalgie/appendicite
"""

import sys
sys.path.append('/Users/alexpeirano/Desktop/commande_entreprise')

from ollama import get_collection, smart_guideline_selection
from colorama import Fore, Style, init
init(autoreset=True)

def test_post_correction():
    """Test apr√®s correction du probl√®me lombalgie"""
    
    cas_critiques = [
        {
            "id": "Lombalgie corrig√©e",
            "patient": "Homme 50 ans, douleur lombaire simple sans signe neurologique",
            "expected": "Lombalgie",
            "probleme_avant": "S√©lectionnait appendicite (FID)"
        },
        {
            "id": "Appendicite pr√©serv√©e", 
            "patient": "Homme 35 ans, douleur fosse iliaque droite, fi√®vre mod√©r√©e",
            "expected": "Appendicite",
            "probleme_avant": "Risque de r√©gression"
        },
        {
            "id": "Colique n√©phr√©tique",
            "patient": "Homme 28 ans, colique lombaire typique sans fi√®vre", 
            "expected": "Colique n√©phr√©tique ou abdominal",
            "probleme_avant": "Confondait avec neurologie"
        },
        {
            "id": "Neurologie pr√©serv√©e",
            "patient": "Homme 22 ans, c√©phal√©e brutale en coup de tonnerre, vomissements",
            "expected": "Neurologique",
            "probleme_avant": "Risque de r√©gression"
        }
    ]
    
    print(f"{Fore.CYAN}{'='*80}")
    print(f"üîß TEST POST-CORRECTION - LOMBALGIE vs APPENDICITE")
    print(f"{'='*80}{Style.RESET_ALL}")
    
    collection = get_collection()
    resultats = []
    
    for cas in cas_critiques:
        print(f"\n{Fore.YELLOW}=== {cas['id']} ==={Style.RESET_ALL}")
        print(f"üìù Patient: {cas['patient']}")
        print(f"üéØ Attendu: {cas['expected']}")
        print(f"‚ö†Ô∏è  Avant: {cas['probleme_avant']}")
        
        result = smart_guideline_selection(cas['patient'], collection)
        print(f"ü§ñ Maintenant: {result[:80]}...")
        
        # Analyse
        success = analyser_correction(cas['expected'], result)
        
        if success:
            print(f"‚úÖ {Fore.GREEN}CORRECT{Style.RESET_ALL}")
            resultats.append(True)
        else:
            print(f"‚ùå {Fore.RED}PROBL√àME{Style.RESET_ALL}")
            resultats.append(False)
    
    # Rapport
    succes = sum(resultats)
    precision = (succes / len(resultats)) * 100
    
    print(f"\n{Fore.MAGENTA}{'='*80}")
    print(f"üìä R√âSULTATS POST-CORRECTION")
    print(f"{'='*80}{Style.RESET_ALL}")
    
    print(f"\nüìà PERFORMANCE:")
    print(f"   ‚úÖ Succ√®s: {succes}/{len(resultats)}")
    print(f"   üìä Pr√©cision: {precision:.1f}%")
    
    if precision == 100:
        print(f"   üèÜ {Fore.GREEN}PARFAIT - Correction r√©ussie sans r√©gression{Style.RESET_ALL}")
    elif precision >= 75:
        print(f"   ‚úÖ {Fore.YELLOW}BON - Correction r√©ussie avec am√©liorations{Style.RESET_ALL}")
    else:
        print(f"   ‚ö†Ô∏è  {Fore.RED}PROBL√àME - R√©gressions d√©tect√©es{Style.RESET_ALL}")
    
    return precision

def analyser_correction(expected, result):
    """Analyse si la correction est r√©ussie"""
    expected_lower = expected.lower()
    result_lower = result.lower()
    
    if 'lombalgie' in expected_lower:
        return 'lombalgie' in result_lower and 'pas d\'imagerie' in result_lower
    elif 'appendicite' in expected_lower:
        return any(terme in result_lower for terme in ['appendicite', 'fid', 'fosse iliaque'])
    elif 'colique' in expected_lower or 'abdominal' in expected_lower:
        return any(terme in result_lower for terme in ['abdomin', 'n√©phr√©tique', 'scanner', '√©chographie'])
    elif 'neurologique' in expected_lower:
        return any(terme in result_lower for terme in ['c√©r√©bral', 'irm', 'scanner', 'neurologique'])
    
    return False

if __name__ == "__main__":
    precision = test_post_correction()
    print(f"\nüéØ Test post-correction: {precision:.1f}% de r√©ussite")
